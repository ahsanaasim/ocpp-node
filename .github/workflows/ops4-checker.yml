name: Ops4Team Scan (Node.js)

on:
  pull_request:
  push:
    branches: [ master ]

permissions:
  contents: read

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        if: hashFiles('**/package.json') != ''
        run: |
          npm ci || npm i

      - name: Run ESLint (JSON)
        if: hashFiles('**/.eslintrc*') != ''
        run: npx eslint . --ext .js,.jsx,.ts,.tsx -f json -o ops4-eslint.json || true

      # - name: Run npm audit (JSON)
      #   if: hashFiles('**/package.json') != ''
      #   run: npm audit --json > ops4-npm-audit.json || true

      - name: Normalize results (Node)
        shell: bash
        run: |
          node <<'NODE'
          const fs = require('fs');
          const crypto = require('crypto');

          const payload = {
            repo: process.env.GITHUB_REPOSITORY,
            sha: process.env.GITHUB_SHA,
            runId: process.env.GITHUB_RUN_ID,
            ref: process.env.GITHUB_REF,
            detectedAt: new Date().toISOString(),
            issues: []
          };
          const fp = (s) => crypto.createHash('sha1').update(s).digest('hex');
          const readJSON = (p) => { try { return JSON.parse(fs.readFileSync(p,'utf8')); } catch { return null; } };

          const eslint = readJSON('ops4-eslint.json') || [];
          for (const f of eslint) {
            for (const m of (f.messages || [])) {
              payload.issues.push({
                tool: 'eslint',
                path: f.filePath,
                
                line: m.line || 1,
                col: m.column || 1,
                endLine: m.endLine || 1,
                endColumn: m.endColumn || 1,
                
                title: m.ruleId ? `ESLint: ${m.ruleId}` : 'ESLint Issue',
                description: m.message,
                severity: (m.severity === 2) ? 'Error' : 'Warn',
                ruleId: m.ruleId || 'eslint',
                
                nodeType: m.nodeType || '',
                messageId: m.messageId || '',
                source: m.source || '',
                suggestions: m.suggestions || [],
                
                fingerprint: fp(`${f.filePath}:${m.ruleId}:${m.line}:${m.message}`),
              });
            }
          }

          fs.writeFileSync('ops4-payload.json', JSON.stringify(payload, null, 2));
          console.log('Normalized issues:', payload.issues.length);
          NODE

      - name: POST results to Ops4Team
        if: always()
        env:
          OPS4_URL: ${{ secrets.OPS4_URL }}
          OPS4_TOKEN: ${{ secrets.OPS4_TOKEN }}
        run: |
          test -f ops4-payload.json || echo '{"issues":[]}' > ops4-payload.json
          curl -sS -X POST "$OPS4_URL/repository-issues" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPS4_TOKEN" \
            --data-binary @ops4-payload.json
