name: Ops4Team Scan (Node.js)

on:
  pull_request:
  push:
    branches: [ master ]

permissions:
  contents: read

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        if: hashFiles('**/package.json') != ''
        run: |
          npm ci || npm i

      - name: Run ESLint (JSON)
        if: hashFiles('**/.eslintrc*') != ''
        run: npx eslint . --ext .js,.jsx,.ts,.tsx -f json -o ops4-eslint.json || true

      - name: Run npm audit (JSON)
        if: hashFiles('**/package.json') != ''
        run: npm audit --json > ops4-npm-audit.json || true

      - name: Normalize results (Node)
        shell: bash
        run: |
          node <<'NODE'
          const fs = require('fs');
          const crypto = require('crypto');

          const payload = {
            repo: process.env.GITHUB_REPOSITORY,
            sha: process.env.GITHUB_SHA,
            runId: process.env.GITHUB_RUN_ID,
            ref: process.env.GITHUB_REF,
            detectedAt: new Date().toISOString(),
            issues: []
          };
          const fp = (s) => crypto.createHash('sha1').update(s).digest('hex');
          const readJSON = (p) => { try { return JSON.parse(fs.readFileSync(p,'utf8')); } catch { return null; } };

          const eslint = readJSON('ops4-eslint.json') || [];
          for (const f of eslint) {
            for (const m of (f.messages || [])) {
              payload.issues.push({
                tool: 'eslint',
                path: f.filePath,
                line: m.line || 1,
                col: m.column || 1,
                title: m.ruleId ? `ESLint: ${m.ruleId}` : 'ESLint Issue',
                description: m.message,
                severity: (m.severity === 2) ? 'High' : 'Medium',
                ruleId: m.ruleId || 'eslint',
                fingerprint: fp(`${f.filePath}:${m.ruleId}:${m.line}:${m.message}`),
                tags: ['lint','nodejs']
              });
            }
          }

          const audit = readJSON('ops4-npm-audit.json');
          const mapSeverity = (s) => {
            const t = String(s || '').toLowerCase();
            if (t === 'critical') return 'Critical';
            if (t === 'high') return 'High';
            if (t === 'moderate') return 'Medium';
            if (t === 'low') return 'Low';
            return 'Medium';
          };

          if (audit) {
            const findings = [];
            if (Array.isArray(audit.vulnerabilities)) {
              findings.push(...audit.vulnerabilities);
            }
            if (audit.advisories) {
              findings.push(...Object.values(audit.advisories));
            }
            if (audit.vulnerabilities && typeof audit.vulnerabilities === 'object' && !Array.isArray(audit.vulnerabilities)) {
              for (const [pkg, info] of Object.entries(audit.vulnerabilities)) {
                if (Array.isArray(info.via)) {
                  for (const via of info.via) {
                    if (typeof via === 'object') findings.push({ package: pkg, ...via });
                  }
                }
              }
            }

            for (const v of findings) {
              const name = v.module_name || v.module || v.package || v.name || 'unknown';
              const cve = v.cves?.[0] || v.cve || v.github_advisory_id || v.id || 'advisory';
              const severity = mapSeverity(v.severity || v.severity_overall || v.severitySource);
              const via = Array.isArray(v.via) ? v.via.map(x => typeof x === 'string' ? x : (x.title || x.source || '')).filter(Boolean).join(' | ') : '';
              const path = v.path || (Array.isArray(v.effects) ? v.effects.join(' > ') : '') || (Array.isArray(v.dependsOn) ? v.dependsOn.join(' > ') : '') || name;
              const installed = v.range || v.findings?.[0]?.version || v.installed_version || v.version || '';
              const fix = v.fixAvailable?.name ? `${v.fixAvailable.name}@${v.fixAvailable.version}` :
                          v.fixAvailable?.version ? v.fixAvailable.version :
                          v.patched_versions || v.fix_versions || v.firstPatchedVersion?.identifier || '';

              const description = [
                v.title || v.overview || v.summary || 'npm advisory',
                cve && cve !== 'advisory' ? `Advisory: ${cve}` : '',
                v.url ? `More: ${v.url}` : ''
              ].filter(Boolean).join(' â€” ');

              payload.issues.push({
                tool: 'npm-audit',
                path: path || name,
                line: 1,
                col: 1,
                title: `npm: ${name}`,
                description,
                severity,
                ruleId: cve || 'npm-advisory',
                fingerprint: fp(`${name}:${cve}:${installed}:${path}`),
                tags: ['security','dependencies','nodejs'],
                meta: { installed, fixedIn: fix }
              });
            }
          }

          fs.writeFileSync('ops4-payload.json', JSON.stringify(payload, null, 2));
          console.log('Normalized issues:', payload.issues.length);
          NODE

      - name: POST results to Ops4Team
        if: always()
        env:
          OPS4_URL: ${{ secrets.OPS4_URL }}
          OPS4_TOKEN: ${{ secrets.OPS4_TOKEN }}
        run: |
          test -f ops4-payload.json || echo '{"issues":[]}' > ops4-payload.json
          curl -sS -X POST "$OPS4_URL/repository-issues" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPS4_TOKEN" \
            --data-binary @ops4-payload.json
